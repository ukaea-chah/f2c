== stderr ==
c_t2.f:
   foo:
== C ==
/* c_t2.f -- translated by f2c (version @VSN).
   You must link the resulting object file with libf2c:
	on Microsoft Windows system, link with libf2c.lib;
	on Linux or Unix systems, link with .../path/to/libf2c.a -lm
	or, if you install libf2c.a in a standard place, with -lf2c -lm
	-- in that order, at the end of the command line, as in
		cc *.o -lf2c -lm
	Source for libf2c is in /netlib/f2c/libf2c.zip, e.g.,

		http://www.netlib.org/f2c/libf2c.zip
*/

#include "f2c.h"

/* Table of constant values */

static integer c__9 = 9;
static integer c__1 = 1;
static integer c__3 = 3;

/*<  12   subroutine foo(bar) >*/
/* Main program */ int MAIN__(integer *bar)
{
    /* Builtin functions */
    integer s_wsle(cilist *), do_lio(integer *, integer *, char *, ftnlen), 
	    e_wsle(void), s_wsfe(cilist *), do_fio(integer *, char *, ftnlen),
	     e_wsfe(void);

    /* Fortran I/O blocks */
    static cilist io___1 = { 0, 6, 0, 0, 0 };
    static cilist io___2 = { 0, 6, 0, "(A,I)", 0 };


/*<       integer bar >*/
/*     Show initial value */
/*<        >*/
/* L12: */
    s_wsle(&io___1);
    do_lio(&c__9, &c__1, "Bar =", (ftnlen)5);
    do_lio(&c__3, &c__1, (char *)&(*bar), (ftnlen)sizeof(integer));
    e_wsle();
/*<        >*/
    *bar = (*bar << 1) + 1;
/*     Think of a number */
/*     double it */
/*     and add one */
/*<  5  6 bar = bar / 5 - 7 >*/
/* L56: */
    *bar = *bar / 5 - 7;
/*     Show final value */
/*<       write(*,'(A,I)') 'now bar =', bar >*/
    s_wsfe(&io___2);
    do_fio(&c__1, "now bar =", (ftnlen)9);
    do_fio(&c__1, (char *)&(*bar), (ftnlen)sizeof(integer));
    e_wsfe();
/*<  34   end >*/
/* L34: */
    return 0;
} /* MAIN__ */

